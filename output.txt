Prolog testing harness version 7
CPSC 449 Prolog Assignment: Pelecaniformes version 2 (Prolog testing harness version 7).
---------------------------------------------------------------
  1. Running test 'order(pelecaniformes). true'...
  Executing: C:\GNU-Prolog\bin\gprolog.exe --c pelecaniformes.pl
  
  List = [_]
  
  yes
  | ?-
  Test 'order(pelecaniformes). true': Success
---------------------------------------------------------------
  2. Running test 'order(pelecanidae). false'...
  List = []
  
  yes
  | ?-
  Test 'order(pelecanidae). false': Success
---------------------------------------------------------------
  3. Running test 'order(X).'...
  setof(X,order(X),L).
  L = [pelecaniformes]
  
  yes
  | ?-
  Test 'order(X).': Success
---------------------------------------------------------------
  4. Running test 'family(pelecanidae). true'...
  List = [_]
  
  yes
  | ?-
  Test 'family(pelecanidae). true': Success
---------------------------------------------------------------
  5. Running test 'family(ardeidae). true'...
  List = [_]
  
  yes
  | ?-
  Test 'family(ardeidae). true': Success
---------------------------------------------------------------
  6. Running test 'family(threskiornithdae). true'...
  List = [_]
  
  yes
  | ?-
  Test 'family(threskiornithdae). true': Success
---------------------------------------------------------------
  7. Running test 'family(pelecaniformes). is an order'...
  List = []
  
  yes
  | ?-
  Test 'family(pelecaniformes). is an order': Success
---------------------------------------------------------------
  8. Running test 'family(X).'...
  setof(X,family(X),L).
  L = [ardeidae,pelecanidae,threskiornithdae]
  
  yes
  | ?-
  Test 'family(X).': Success
---------------------------------------------------------------
  9. Running test 'genus(botaurus). true'...
  List = [_]
  
  yes
  | ?-
  Test 'genus(botaurus). true': Success
---------------------------------------------------------------
 10. Running test 'genus(ardea). true'...
  List = [_]
  
  yes
  | ?-
  Test 'genus(ardea). true': Success
---------------------------------------------------------------
 11. Running test 'genus(nycticorax). is both a genus and a species'...
  List = [_]
  
  yes
  | ?-
  Test 'genus(nycticorax). is both a genus and a species': Success
---------------------------------------------------------------
 12. Running test 'genus(erythrorhynchos). is a species'...
  List = []
  
  yes
  | ?-
  Test 'genus(erythrorhynchos). is a species': Success
---------------------------------------------------------------
 13. Running test 'genus(X).'...
  setof(X,genus(X),L).
  L = [ardea,botaurus,bubulcus,butorides,egretta,eudocimus,ixobrychus,nyctanassa,nycticorax,pelecanus,platalea,plegadis]
  
  yes
  | ?-
  Test 'genus(X).': Success
---------------------------------------------------------------
 14. Running test 'species(occidentalis). true'...
  List = [_]
  
  yes
  | ?-
  Test 'species(occidentalis). true': Success
---------------------------------------------------------------
 15. Running test 'species(thula). true'...
  List = [_]
  
  yes
  | ?-
  Test 'species(thula). true': Success
---------------------------------------------------------------
 16. Running test 'species(nycticorax). is both a genus and a species'...
  List = [_]
  
  yes
  | ?-
  Test 'species(nycticorax). is both a genus and a species': Success
---------------------------------------------------------------
 17. Running test 'species(plegadis). is a genus'...
  List = []
  
  yes
  | ?-
  Test 'species(plegadis). is a genus': Success
---------------------------------------------------------------
 18. Running test 'species(X).'...
  setof(X,species(X),L).
  L = [ajaja,alba,albus,caerulea,chihi,erythrorhynchos,exilis,falcinellus,herodias,ibis,lentiginosus,nycticorax,occidentalis,rufescens,thula,tricolor,violacea,virescens]
  
  yes
  | ?-
  Test 'species(X).': Success
---------------------------------------------------------------
 19. Running test 'hasParent(plegadis_falcinellus,plegadis). cspecies/genus'...
  List = []
  
  yes
  | ?-
  Test 'hasParent(plegadis_falcinellus,plegadis). cspecies/genus': Success
---------------------------------------------------------------
 20. Running test 'hasParent(falcinellus,plegadis). species/genus'...
  List = [_]
  
  yes
  | ?-
  Test 'hasParent(falcinellus,plegadis). species/genus': Success
---------------------------------------------------------------
 21. Running test 'hasParent(nycticorax,ardeidae). genus/family'...
  List = [_]
  
  yes
  | ?-
  Test 'hasParent(nycticorax,ardeidae). genus/family': Success
---------------------------------------------------------------
 22. Running test 'hasParent(threskiornithdae,pelecaniformes). family/order'...
  List = [_]
  
  yes
  | ?-
  Test 'hasParent(threskiornithdae,pelecaniformes). family/order': Success
---------------------------------------------------------------
 23. Running test 'hasParent(falcinellus,ardeidae). species/family'...
  List = []
  
  yes
  | ?-
  Test 'hasParent(falcinellus,ardeidae). species/family': Success
---------------------------------------------------------------
 24. Running test 'hasParent(nycticorax,pelecaniformes). genus/order'...
  List = []
  
  yes
  | ?-
  Test 'hasParent(nycticorax,pelecaniformes). genus/order': Success
---------------------------------------------------------------
 25. Running test 'hasParent(X,egretta).'...
  setof(X,hasParent(X,egretta),L).
  L = [caerulea,rufescens,thula,tricolor]
  
  yes
  | ?-
  Test 'hasParent(X,egretta).': Success
---------------------------------------------------------------
 26. Running test 'hasParent(egretta,ardeidae). genus/family'...
  List = [_]
  
  yes
  | ?-
  Test 'hasParent(egretta,ardeidae). genus/family': Success
---------------------------------------------------------------
 27. Running test 'hasParent(caerulea,X).'...
  setof(X,hasParent(caerulea,X),L).
  L = [egretta]
  
  yes
  | ?-
  Test 'hasParent(caerulea,X).': Success
---------------------------------------------------------------
 28. Running test 'hasParent(X,Y).'...
  setof([X,Y],hasParent(X,Y),L).
  L = [[ajaja,platalea],[alba,ardea],[albus,eudocimus],[ardea,ardeidae],[ardeidae,pelecaniformes],[botaurus,ardeidae],[bubulcus,ardeidae],[butorides,ardeidae],[caerulea,egretta],[chihi,plegadis],[egretta,ardeidae],[erythrorhynchos,pelecanus],[eudocimus,threskiornithdae],[exilis,ixobrychus],[falcinellus,plegadis],[herodias,ardea],[ibis,bubulcus],[ixobrychus,ardeidae],[lentiginosus,botaurus],[nyctanassa,ardeidae],[nycticorax,ardeidae],[nycticorax,nycticorax],[occidentalis,pelecanus],[pelecanidae,pelecaniformes],[pelecanus,pelecanidae],[platalea,threskiornithdae],[plegadis,threskiornithdae],[rufescens,egretta],[threskiornithdae,pelecaniformes],[thula,egretta],[tricolor,egretta],[violacea,nyctanassa],[virescens,butorides]]
  
  yes
  | ?-
  Test 'hasParent(X,Y).': Success
---------------------------------------------------------------
 29. Running test 'hasParent2(plegadis_falcinellus,plegadis). cspecies/genus'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(plegadis_falcinellus,plegadis). cspecies/genus': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
 30. Running test 'hasParent2(falcinellus,plegadis). species/genus'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(falcinellus,plegadis). species/genus': Unimplemented term:
          Expected expression to fail.
---------------------------------------------------------------
 31. Running test 'hasParent2(nycticorax,ardeidae). genus/family'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(nycticorax,ardeidae). genus/family': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
 32. Running test 'hasParent2(threskiornithdae,pelecaniformes). family/order'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(threskiornithdae,pelecaniformes). family/order': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
 33. Running test 'hasParent2(plegadis_falcinellus,ardeidae). cspecies/family'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(plegadis_falcinellus,ardeidae). cspecies/family': Unimplemented term:
          Expected expression to fail.
---------------------------------------------------------------
 34. Running test 'hasParent2(nycticorax,pelecaniformes). genus/order'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(nycticorax,pelecaniformes). genus/order': Unimplemented term:
          Expected expression to fail.
---------------------------------------------------------------
 35. Running test 'hasParent2(X,egretta).'...
  setof(X,hasParent2(X,egretta),L).
  uncaught exception: error(existence_error(procedure,hasParent2/2),setof/3)
  | ?-
  Test 'hasParent2(X,egretta).': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
 36. Running test 'hasParent2(egretta,ardeidae). genus/family'...
  uncaught exception: error(existence_error(procedure,hasParent2/2),findall/3)
  | ?-
  Test 'hasParent2(egretta,ardeidae). genus/family': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
 37. Running test 'hasParent2(egretta_caerulea,X).'...
  setof(X,hasParent2(egretta_caerulea,X),L).
  uncaught exception: error(existence_error(procedure,hasParent2/2),setof/3)
  | ?-
  Test 'hasParent2(egretta_caerulea,X).': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
 38. Running test 'hasParent2(X,Y).'...
  setof([X,Y],hasParent2(X,Y),L).
  uncaught exception: error(existence_error(procedure,hasParent2/2),setof/3)
  | ?-
  Test 'hasParent2(X,Y).': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
 39. Running test 'hasCommonName(pelecanus,pelican). order'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(pelecanus,pelican). order': Success
---------------------------------------------------------------
 40. Running test 'hasCommonName(ardea,heron). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(ardea,heron). genus': Success
---------------------------------------------------------------
 41. Running test 'hasCommonName(nycticorax,nightHeron). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(nycticorax,nightHeron). genus': Success
---------------------------------------------------------------
 42. Running test 'hasCommonName(nyctanassa,nightHeron). genus (also above)'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(nyctanassa,nightHeron). genus (also above)': Success
---------------------------------------------------------------
 43. Running test 'hasCommonName(pelecanus_erythrorhynchos,americanWhitePelican). cspeces'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(pelecanus_erythrorhynchos,americanWhitePelican). cspeces': Success
---------------------------------------------------------------
 44. Running test 'hasCommonName(erythrorhynchos,americanWhitePelican). raw speces'...
  List = []
  
  yes
  | ?-
  Test 'hasCommonName(erythrorhynchos,americanWhitePelican). raw speces': Success
---------------------------------------------------------------
 45. Running test 'hasCommonName(pelecanus_erythrorhynchos,brownPelican). cspeces/wrongName'...
  List = []
  
  yes
  | ?-
  Test 'hasCommonName(pelecanus_erythrorhynchos,brownPelican). cspeces/wrongName': Success
---------------------------------------------------------------
 46. Running test 'hasCommonName(butorides_virescens,greenHeron). cspecies'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(butorides_virescens,greenHeron). cspecies': Success
---------------------------------------------------------------
 47. Running test 'hasCommonName(nyctanassa_violacea,X). cspecies/'...
  setof(X,hasCommonName(nyctanassa_violacea,X),L).
  L = [yellowCrownedNightHeron]
  
  yes
  | ?-
  Test 'hasCommonName(nyctanassa_violacea,X). cspecies/': Success
---------------------------------------------------------------
 48. Running test 'hasCommonName(X,roseateSpoonbill). /commonName'...
  setof(X,hasCommonName(X,roseateSpoonbill),L).
  L = [platalea_ajaja]
  
  yes
  | ?-
  Test 'hasCommonName(X,roseateSpoonbill). /commonName': Success
---------------------------------------------------------------
 49. Running test 'hasCommonName(botaurus,lentiginosus,americanBittern). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(botaurus,lentiginosus,americanBittern). true': Success
---------------------------------------------------------------
 50. Running test 'hasCommonName(egretta,rufescens,reddishEgret). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(egretta,rufescens,reddishEgret). true': Success
---------------------------------------------------------------
 51. Running test 'hasCommonName(egretta,alba,reddishEgret). genus/species mismatch'...
  List = []
  
  yes
  | ?-
  Test 'hasCommonName(egretta,alba,reddishEgret). genus/species mismatch': Success
---------------------------------------------------------------
 52. Running test 'hasCommonName(egretta,rufescens,snowyEgret). wrong common name'...
  List = []
  
  yes
  | ?-
  Test 'hasCommonName(egretta,rufescens,snowyEgret). wrong common name': Success
---------------------------------------------------------------
 53. Running test 'hasCommonName(nycticorax,nycticorax,blackCrownedNightHeron). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCommonName(nycticorax,nycticorax,blackCrownedNightHeron). true': Success
---------------------------------------------------------------
 54. Running test 'hasCommonName(botaurus,lentiginosus,X).'...
  setof(X,hasCommonName(botaurus,lentiginosus,X),L).
  L = [americanBittern]
  
  yes
  | ?-
  Test 'hasCommonName(botaurus,lentiginosus,X).': Success
---------------------------------------------------------------
 55. Running test 'hasCommonName(egretta,rufescens,X).'...
  setof(X,hasCommonName(egretta,rufescens,X),L).
  L = [reddishEgret]
  
  yes
  | ?-
  Test 'hasCommonName(egretta,rufescens,X).': Success
---------------------------------------------------------------
 56. Running test 'hasCommonName(nycticorax,nycticorax,X).'...
  setof(X,hasCommonName(nycticorax,nycticorax,X),L).
  L = [blackCrownedNightHeron]
  
  yes
  | ?-
  Test 'hasCommonName(nycticorax,nycticorax,X).': Success
---------------------------------------------------------------
 57. Running test 'hasCommonName(X,Y,americanBittern).'...
  setof([X,Y],hasCommonName(X,Y,americanBittern),L).
  L = [[botaurus,lentiginosus]]
  
  yes
  | ?-
  Test 'hasCommonName(X,Y,americanBittern).': Success
---------------------------------------------------------------
 58. Running test 'hasCommonName(X,Y,reddishEgret).'...
  setof([X,Y],hasCommonName(X,Y,reddishEgret),L).
  L = [[egretta,rufescens]]
  
  yes
  | ?-
  Test 'hasCommonName(X,Y,reddishEgret).': Success
---------------------------------------------------------------
 59. Running test 'hasCommonName(X,Y,blackCrownedNightHeron).'...
  setof([X,Y],hasCommonName(X,Y,blackCrownedNightHeron),L).
  L = [[nycticorax,nycticorax]]
  
  yes
  | ?-
  Test 'hasCommonName(X,Y,blackCrownedNightHeron).': Success
---------------------------------------------------------------
 60. Running test 'hasSciName(greatBlueHeron,ardea_herodias). cspeces'...
  List = [_]
  
  yes
  | ?-
  Test 'hasSciName(greatBlueHeron,ardea_herodias). cspeces': Success
---------------------------------------------------------------
 61. Running test 'hasSciName(snowyEgret,egretta_thula). cspeces'...
  List = [_]
  
  yes
  | ?-
  Test 'hasSciName(snowyEgret,egretta_thula). cspeces': Success
---------------------------------------------------------------
 62. Running test 'hasSciName(snowyEgret,thula). raw speces'...
  List = []
  
  yes
  | ?-
  Test 'hasSciName(snowyEgret,thula). raw speces': Success
---------------------------------------------------------------
 63. Running test 'hasSciName(cattleEgret,bubulcus_ibis). cspeces'...
  List = [_]
  
  yes
  | ?-
  Test 'hasSciName(cattleEgret,bubulcus_ibis). cspeces': Success
---------------------------------------------------------------
 64. Running test 'hasSciName(cattleEgret,ibis). raw speces'...
  List = []
  
  yes
  | ?-
  Test 'hasSciName(cattleEgret,ibis). raw speces': Success
---------------------------------------------------------------
 65. Running test 'hasSciName(ibis,eudocimus). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'hasSciName(ibis,eudocimus). genus': Success
---------------------------------------------------------------
 66. Running test 'hasSciName(ibis,plegadis). genus (same as above)'...
  List = [_]
  
  yes
  | ?-
  Test 'hasSciName(ibis,plegadis). genus (same as above)': Success
---------------------------------------------------------------
 67. Running test 'hasSciName(greatBlueHeron,X). cspecies/'...
  setof(X,hasSciName(greatBlueHeron,X),L).
  L = [ardea_herodias]
  
  yes
  | ?-
  Test 'hasSciName(greatBlueHeron,X). cspecies/': Success
---------------------------------------------------------------
 68. Running test 'hasSciName(snowyEgret,X). cspecies/'...
  setof(X,hasSciName(snowyEgret,X),L).
  L = [egretta_thula]
  
  yes
  | ?-
  Test 'hasSciName(snowyEgret,X). cspecies/': Success
---------------------------------------------------------------
 69. Running test 'hasSciName(cattleEgret,X). cspecies/'...
  setof(X,hasSciName(cattleEgret,X),L).
  L = [bubulcus_ibis]
  
  yes
  | ?-
  Test 'hasSciName(cattleEgret,X). cspecies/': Success
---------------------------------------------------------------
 70. Running test 'hasSciName(X,ardea_herodias). /cspecies'...
  setof(X,hasSciName(X,ardea_herodias),L).
  L = [greatBlueHeron]
  
  yes
  | ?-
  Test 'hasSciName(X,ardea_herodias). /cspecies': Success
---------------------------------------------------------------
 71. Running test 'hasSciName(X,egretta_thula). /cspecies'...
  setof(X,hasSciName(X,egretta_thula),L).
  L = [snowyEgret]
  
  yes
  | ?-
  Test 'hasSciName(X,egretta_thula). /cspecies': Success
---------------------------------------------------------------
 72. Running test 'hasSciName(X,bubulcus_ibis). /cspecies'...
  setof(X,hasSciName(X,bubulcus_ibis),L).
  L = [cattleEgret]
  
  yes
  | ?-
  Test 'hasSciName(X,bubulcus_ibis). /cspecies': Success
---------------------------------------------------------------
 73. Running test 'hasCompoundName(pelecanus,occidentalis,pelecanus_occidentalis). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCompoundName(pelecanus,occidentalis,pelecanus_occidentalis). true': Success
---------------------------------------------------------------
 74. Running test 'hasCompoundName(egretta,tricolor,egretta_tricolor). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCompoundName(egretta,tricolor,egretta_tricolor). true': Success
---------------------------------------------------------------
 75. Running test 'hasCompoundName(plegadis,chihi,plegadis_chihi). true'...
  List = [_]
  
  yes
  | ?-
  Test 'hasCompoundName(plegadis,chihi,plegadis_chihi). true': Success
---------------------------------------------------------------
 76. Running test 'hasCompoundName(plegadis,chihi,egretta_tricolor). wrong name'...
  List = []
  
  yes
  | ?-
  Test 'hasCompoundName(plegadis,chihi,egretta_tricolor). wrong name': Success
---------------------------------------------------------------
 77. Running test 'hasCompoundName(pelecanus,occidentalis,X).'...
  setof(X,hasCompoundName(pelecanus,occidentalis,X),L).
  L = [pelecanus_occidentalis]
  
  yes
  | ?-
  Test 'hasCompoundName(pelecanus,occidentalis,X).': Success
---------------------------------------------------------------
 78. Running test 'hasCompoundName(egretta,tricolor,X).'...
  setof(X,hasCompoundName(egretta,tricolor,X),L).
  L = [egretta_tricolor]
  
  yes
  | ?-
  Test 'hasCompoundName(egretta,tricolor,X).': Success
---------------------------------------------------------------
 79. Running test 'hasCompoundName(plegadis,chihi,X).'...
  setof(X,hasCompoundName(plegadis,chihi,X),L).
  L = [plegadis_chihi]
  
  yes
  | ?-
  Test 'hasCompoundName(plegadis,chihi,X).': Success
---------------------------------------------------------------
 80. Running test 'hasCompoundName(X,Y,pelecanus_occidentalis).'...
  setof([X,Y],hasCompoundName(X,Y,pelecanus_occidentalis),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'hasCompoundName(X,Y,pelecanus_occidentalis).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
 81. Running test 'hasCompoundName(X,Y,egretta_tricolor).'...
  setof([X,Y],hasCompoundName(X,Y,egretta_tricolor),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'hasCompoundName(X,Y,egretta_tricolor).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
 82. Running test 'hasCompoundName(X,Y,plegadis_chihi).'...
  setof([X,Y],hasCompoundName(X,Y,plegadis_chihi),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'hasCompoundName(X,Y,plegadis_chihi).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
 83. Running test 'synonym(plegadis,plegadis). equal'...
  List = []
  
  yes
  | ?-
  Test 'synonym(plegadis,plegadis). equal': Success
---------------------------------------------------------------
 84. Running test 'synonym(glossyIbis,plegadis_falcinellus). common/cspecies'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(glossyIbis,plegadis_falcinellus). common/cspecies': Success
---------------------------------------------------------------
 85. Running test 'synonym(glossyIbis,alcinellus). common/rawSpecies'...
  List = []
  
  yes
  | ?-
  Test 'synonym(glossyIbis,alcinellus). common/rawSpecies': Success
---------------------------------------------------------------
 86. Running test 'synonym(plegadis_falcinellus,glossyIbis). species/common'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(plegadis_falcinellus,glossyIbis). species/common': Success
---------------------------------------------------------------
 87. Running test 'synonym(falcinellus,glossyIbis). rawSpecies/common'...
  List = []
  
  yes
  | ?-
  Test 'synonym(falcinellus,glossyIbis). rawSpecies/common': Success
---------------------------------------------------------------
 88. Running test 'synonym(glossyIbis,plegadis_falcinellus). common/compound'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(glossyIbis,plegadis_falcinellus). common/compound': Success
---------------------------------------------------------------
 89. Running test 'synonym(plegadis_falcinellus,glossyIbis). compound/common'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(plegadis_falcinellus,glossyIbis). compound/common': Success
---------------------------------------------------------------
 90. Running test 'synonym(bittern,ixobrychus). common/genus'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(bittern,ixobrychus). common/genus': Success
---------------------------------------------------------------
 91. Running test 'synonym(ixobrychus,botaurus). genus/genus with same common name'...
  List = []
  
  yes
  | ?-
  Test 'synonym(ixobrychus,botaurus). genus/genus with same common name': Success
---------------------------------------------------------------
 92. Running test 'synonym(bittern,botaurus). common/genus (same as above)'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(bittern,botaurus). common/genus (same as above)': Success
---------------------------------------------------------------
 93. Running test 'synonym(heron,egret). both are names for egretta'...
  List = [_]
  
  yes
  | ?-
  Test 'synonym(heron,egret). both are names for egretta': Success
---------------------------------------------------------------
 94. Running test 'synonym(greenHeron,X). common/'...
  setof(X,synonym(greenHeron,X),L).
  L = [butorides_virescens]
  
  yes
  | ?-
  Test 'synonym(greenHeron,X). common/': Success
---------------------------------------------------------------
 95. Running test 'synonym(X,greenHeron). /common'...
  setof(X,synonym(X,greenHeron),L).
  L = [butorides_virescens]
  
  yes
  | ?-
  Test 'synonym(X,greenHeron). /common': Success
---------------------------------------------------------------
 96. Running test 'synonym(butorides_virescens,X). cspecies/'...
  setof(X,synonym(butorides_virescens,X),L).
  L = [greenHeron]
  
  yes
  | ?-
  Test 'synonym(butorides_virescens,X). cspecies/': Success
---------------------------------------------------------------
 97. Running test 'synonym(X,butorides_virescens). /cspecies'...
  setof(X,synonym(X,butorides_virescens),L).
  L = [greenHeron]
  
  yes
  | ?-
  Test 'synonym(X,butorides_virescens). /cspecies': Success
---------------------------------------------------------------
 98. Running test 'synonym(X,heron). /common that maps to 3 genera'...
  setof(X,synonym(X,heron),L).
  L = [ardea,butorides,egret,egretta]
  
  yes
  | ?-
  Test 'synonym(X,heron). /common that maps to 3 genera': Success
---------------------------------------------------------------
 99. Running test 'synonym(heron,X). /common that maps to 3 genera'...
  setof(X,synonym(heron,X),L).
  L = [ardea,butorides,egret,egretta]
  
  yes
  | ?-
  Test 'synonym(heron,X). /common that maps to 3 genera': Success
---------------------------------------------------------------
100. Running test 'isaStrict(exilis,exilis). equal species'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(exilis,exilis). equal species': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
101. Running test 'isaStrict(ardeidae,ardeidae). equal families'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ardeidae,ardeidae). equal families': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
102. Running test 'isaStrict(x,x). equal but unknown'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(x,x). equal but unknown': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
103. Running test 'isaStrict(ixobrychus_exilis,ixobrychus). cspecies to genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,ixobrychus). cspecies to genus': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
104. Running test 'isaStrict(ixobrychus_exilis,ardeidae). cspecies to family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,ardeidae). cspecies to family': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
105. Running test 'isaStrict(ixobrychus_exilis,pelecaniformes). cspecies to top'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,pelecaniformes). cspecies to top': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
106. Running test 'isaStrict(ixobrychus_exilis,botaurus). cspecies to wrong genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,botaurus). cspecies to wrong genus': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
107. Running test 'isaStrict(ixobrychus_exilis,pelecanidae). cspecies to wrong family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,pelecanidae). cspecies to wrong family': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
108. Running test 'isaStrict(exilis,ixobrychus). raw species to genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(exilis,ixobrychus). raw species to genus': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
109. Running test 'isaStrict(ixobrychus_exilis,X).'...
  setof(X,isaStrict(ixobrychus_exilis,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isaStrict(ixobrychus_exilis,X).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
110. Running test 'isa(exilis,exilis). equal raw species'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(exilis,exilis). equal raw species': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
111. Running test 'isa(ardeidae,ardeidae). equal families'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ardeidae,ardeidae). equal families': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
112. Running test 'isa(x,x). equal but unknown name'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(x,x). equal but unknown name': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
113. Running test 'isa(ixobrychus_exilis,ixobrychus). cspecies to genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,ixobrychus). cspecies to genus': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
114. Running test 'isa(ixobrychus_exilis,ardeidae). cspecies to family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,ardeidae). cspecies to family': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
115. Running test 'isa(ixobrychus_exilis,pelecaniformes). cspecies to top'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,pelecaniformes). cspecies to top': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
116. Running test 'isa(ixobrychus_exilis,botaurus). cspecies to wrong genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,botaurus). cspecies to wrong genus': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
117. Running test 'isa(ixobrychus_exilis,pelecanidae). cspecies to wrong family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,pelecanidae). cspecies to wrong family': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
118. Running test 'isa(exilis,ixobrychus). raw species to genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(exilis,ixobrychus). raw species to genus': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
119. Running test 'isa(ixobrychus_exilis,X).'...
  setof(X,isa(ixobrychus_exilis,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,X).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
120. Running test 'isa(X,pelecanidae).'...
  setof(X,isa(X,pelecanidae),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(X,pelecanidae).': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
121. Running test 'isa(plegadis,ibis). equal genera/common'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(plegadis,ibis). equal genera/common': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
122. Running test 'isa(plegadis_chihi,ibis). equal cspecies/common'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(plegadis_chihi,ibis). equal cspecies/common': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
123. Running test 'isa(cattleEgret,cattleEgret). equal common/common'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(cattleEgret,cattleEgret). equal common/common': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
124. Running test 'isa(chihi,ibis). equal rawSpecies/common'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(chihi,ibis). equal rawSpecies/common': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
125. Running test 'isa(platalea_ajaja,pelecaniformes). bottom to top'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(platalea_ajaja,pelecaniformes). bottom to top': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
126. Running test 'isa(cattleEgret,bubulcus_ibis). equal commonName to compound species'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(cattleEgret,bubulcus_ibis). equal commonName to compound species': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
127. Running test 'isa(whiteIbis,eudocimus). common species name to genus'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(whiteIbis,eudocimus). common species name to genus': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
128. Running test 'isa(leastBittern,ardeidae). common species name to family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(leastBittern,ardeidae). common species name to family': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
129. Running test 'isa(leastBittern,bittern). common species name to common family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(leastBittern,bittern). common species name to common family': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
130. Running test 'isa(whiteFacedIbis,chihi). common species name to species alone'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(whiteFacedIbis,chihi). common species name to species alone': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
131. Running test 'isa(plegadis_falcinellus,threskiornithdae). compound species name to family'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(plegadis_falcinellus,threskiornithdae). compound species name to family': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
132. Running test 'isa(nyctanassa,nightHeron). genus to genus common name'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(nyctanassa,nightHeron). genus to genus common name': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
133. Running test 'isa(nyctanassa,egret). genus to wrong genus common name'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(nyctanassa,egret). genus to wrong genus common name': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
134. Running test 'isa(nyctanassa_violacea,nightHeron). cspecies to genus common name'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(nyctanassa_violacea,nightHeron). cspecies to genus common name': Incorrect output:
          Expected expression to succeed.
---------------------------------------------------------------
135. Running test 'isa(nyctanassa_violacea,egret). cspecies to wrong genus common name'...
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(nyctanassa_violacea,egret). cspecies to wrong genus common name': Incorrect output:
          Expected expression to fail.
---------------------------------------------------------------
136. Running test 'isa(x,X). unknown/'...
  setof(X,isa(x,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(x,X). unknown/': Incorrect output:
          Expected list starting with 'L = [' and ending with ']', but got 'uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-'.
---------------------------------------------------------------
137. Running test 'isa(ardea_herodias,X). species'...
  setof(X,isa(ardea_herodias,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ardea_herodias,X). species': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
138. Running test 'isa(greatBlueHeron,X). common species'...
  setof(X,isa(greatBlueHeron,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(greatBlueHeron,X). common species': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
139. Running test 'isa(ixobrychus_exilis,X). compound species'...
  setof(X,isa(ixobrychus_exilis,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(ixobrychus_exilis,X). compound species': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
140. Running test 'isa(butorides,X). genus'...
  setof(X,isa(butorides,X),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(butorides,X). genus': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
141. Running test 'isa(X,ardeidae). family'...
  setof(X,isa(X,ardeidae),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(X,ardeidae). family': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
142. Running test 'isa(X,eudocimus_albus). compound species'...
  setof(X,isa(X,eudocimus_albus),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(X,eudocimus_albus). compound species': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
143. Running test 'isa(X,bittern). common species (multi)'...
  setof(X,isa(X,bittern),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'isa(X,bittern). common species (multi)': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
144. Running test 'countSpecies(botaurus_lentiginosus,1). species'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(botaurus_lentiginosus,1). species': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
145. Running test 'countSpecies(botaurus,1). single-species genus'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(botaurus,1). single-species genus': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
146. Running test 'countSpecies(egretta,4). 4-species genus'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(egretta,4). 4-species genus': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
147. Running test 'countSpecies(ardeidae,12). 12-species family'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(ardeidae,12). 12-species family': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
148. Running test 'countSpecies(pelecaniformes,18). 18-species order'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(pelecaniformes,18). 18-species order': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
149. Running test 'countSpecies(x,0). 0-species unknown name'...
  uncaught exception: error(existence_error(procedure,countSpecies/2),findall/3)
  | ?-
  Test 'countSpecies(x,0). 0-species unknown name': Unimplemented term:
          Expected expression to succeed.
---------------------------------------------------------------
150. Running test 'countSpecies(botaurus_lentiginosus,X). species'...
  setof(X,countSpecies(botaurus_lentiginosus,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(botaurus_lentiginosus,X). species': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
151. Running test 'countSpecies(botaurus,X). single-species genus'...
  setof(X,countSpecies(botaurus,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(botaurus,X). single-species genus': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
152. Running test 'countSpecies(egretta,X). 4-species genus'...
  setof(X,countSpecies(egretta,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(egretta,X). 4-species genus': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
153. Running test 'countSpecies(ardeidae,X). 12-species family'...
  setof(X,countSpecies(ardeidae,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(ardeidae,X). 12-species family': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
154. Running test 'countSpecies(pelecaniformes,X). 18-species order'...
  setof(X,countSpecies(pelecaniformes,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(pelecaniformes,X). 18-species order': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
155. Running test 'countSpecies(x,X). 0-species unknown name'...
  setof(X,countSpecies(x,X),L).
  uncaught exception: error(existence_error(procedure,countSpecies/2),setof/3)
  | ?-
  Test 'countSpecies(x,X). 0-species unknown name': Unimplemented term:
          Expected starts-with of L = [
---------------------------------------------------------------
156. Running test 'rangesTo(botaurus_lentiginosus,alberta). simple species'...
  List = [_]
  
  yes
  | ?-
  Test 'rangesTo(botaurus_lentiginosus,alberta). simple species': Success
---------------------------------------------------------------
157. Running test 'rangesTo(botaurus_lentiginosus,canada). species, inferred location'...
  List = [_]
  
  yes
  | ?-
  Test 'rangesTo(botaurus_lentiginosus,canada). species, inferred location': Success
---------------------------------------------------------------
158. Running test 'rangesTo(pelecanus,alberta). simple genus'...
  List = [_]
  
  yes
  | ?-
  Test 'rangesTo(pelecanus,alberta). simple genus': Success
---------------------------------------------------------------
159. Running test 'rangesTo(pelecanus,canada). genus, inferred location'...
  List = [_]
  
  yes
  | ?-
  Test 'rangesTo(pelecanus,canada). genus, inferred location': Success
---------------------------------------------------------------
160. Running test 'rangesTo(pelecanidae,canada). order, inferred location'...
  List = [_]
  
  yes
  | ?-
  Test 'rangesTo(pelecanidae,canada). order, inferred location': Success
---------------------------------------------------------------
161. Running test 'rangesTo(ardea_alba,alberta). speces, wrong location'...
  List = []
  
  yes
  | ?-
  Test 'rangesTo(ardea_alba,alberta). speces, wrong location': Success
---------------------------------------------------------------
162. Running test 'rangesTo(platalea_ajaja,canada). speces, wrong location'...
  List = []
  
  yes
  | ?-
  Test 'rangesTo(platalea_ajaja,canada). speces, wrong location': Success
---------------------------------------------------------------
163. Running test 'rangesTo(botaurus_lentiginosus,X). species, inferred location'...
  setof(X,rangesTo(botaurus_lentiginosus,X),L).
  L = [alberta,canada]
  
  yes
  | ?-
  Test 'rangesTo(botaurus_lentiginosus,X). species, inferred location': Success
---------------------------------------------------------------
164. Running test 'rangesTo(pelecanus,X). simple genus'...
  setof(X,rangesTo(pelecanus,X),L).
  L = [alberta,canada]
  
  yes
  | ?-
  Test 'rangesTo(pelecanus,X). simple genus': Success
---------------------------------------------------------------
165. Running test 'rangesTo(pelecanus,X). genus, inferred location'...
  setof(X,rangesTo(pelecanus,X),L).
  L = [alberta,canada]
  
  yes
  | ?-
  Test 'rangesTo(pelecanus,X). genus, inferred location': Success
---------------------------------------------------------------
166. Running test 'rangesTo(pelecanidae,X). order, inferred location'...
  setof(X,rangesTo(pelecanidae,X),L).
  L = [alberta,canada]
  
  yes
  | ?-
  Test 'rangesTo(pelecanidae,X). order, inferred location': Success
---------------------------------------------------------------
167. Running test 'rangesTo(ardea_alba,alberta). speces, wrong location'...
  setof(X,rangesTo(ardea_alba,alberta),L).
  no
  | ?-
  Test 'rangesTo(ardea_alba,alberta). speces, wrong location': Success
---------------------------------------------------------------
168. Running test 'rangesTo(platalea_ajaja,canada). speces, wrong location'...
  setof(X,rangesTo(platalea_ajaja,canada),L).
  no
  | ?-
  Test 'rangesTo(platalea_ajaja,canada). speces, wrong location': Success
---------------------------------------------------------------
169. Running test 'rangesTo(X,alberta). /alberta'...
  setof(X,rangesTo(X,alberta),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'rangesTo(X,alberta). /alberta': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
170. Running test 'rangesTo(X,canada). /canada'...
  setof(X,rangesTo(X,canada),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'rangesTo(X,canada). /canada': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
171. Running test 'rangesTo(X,Y). * / *'...
  setof([X,Y],rangesTo(X,Y),L).
  uncaught exception: error(instantiation_error,atom_concat/3)
  | ?-
  Test 'rangesTo(X,Y). * / *': Incorrect output:
          Expected starts-with of L = [
---------------------------------------------------------------
172. Running test 'habitat(pelecanus_erythrorhynchos,lakePond). true'...
  List = [_]
  
  yes
  | ?-
  Test 'habitat(pelecanus_erythrorhynchos,lakePond). true': Success
---------------------------------------------------------------
173. Running test 'habitat(botaurus_lentiginosus,marsh). true'...
  List = [_]
  
  yes
  | ?-
  Test 'habitat(botaurus_lentiginosus,marsh). true': Success
---------------------------------------------------------------
174. Running test 'habitat(botaurus_lentiginosus,ocean). false'...
  List = []
  
  yes
  | ?-
  Test 'habitat(botaurus_lentiginosus,ocean). false': Success
---------------------------------------------------------------
175. Running test 'habitat(x,ocean). false'...
  List = []
  
  yes
  | ?-
  Test 'habitat(x,ocean). false': Success
---------------------------------------------------------------
176. Running test 'habitat(egretta_tricolor,X). single'...
  setof(X,habitat(egretta_tricolor,X),L).
  L = [marsh]
  
  yes
  | ?-
  Test 'habitat(egretta_tricolor,X). single': Success
---------------------------------------------------------------
177. Running test 'habitat(X,ocean). single'...
  setof(X,habitat(X,ocean),L).
  L = [pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis]
  
  yes
  | ?-
  Test 'habitat(X,ocean). single': Incorrect output:
          Expected bag of [pelecanus_occidentalis], but got [pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis]
---------------------------------------------------------------
178. Running test 'habitat(X,marsh). multiple'...
  setof(X,habitat(X,marsh),L).
  L = [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
  
  yes
  | ?-
  Test 'habitat(X,marsh). multiple': Incorrect output:
          Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus_albus,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax,platalea_ajaja,plegadis_chihi,plegadis_falcinellus], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
---------------------------------------------------------------
179. Running test 'habitat(pelecanus,ocean). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'habitat(pelecanus,ocean). genus': Success
---------------------------------------------------------------
180. Running test 'habitat(pelecaniformes,ocean). order'...
  List = [_]
  
  yes
  | ?-
  Test 'habitat(pelecaniformes,ocean). order': Success
---------------------------------------------------------------
181. Running test 'habitat(pelecaniformes,X). multiple'...
  setof(X,habitat(pelecaniformes,X),L).
  L = [lakePond,marsh,ocean]
  
  yes
  | ?-
  Test 'habitat(pelecaniformes,X). multiple': Success
---------------------------------------------------------------
182. Running test 'food(pelecanus_erythrorhynchos,fish). true'...
  List = [_]
  
  yes
  | ?-
  Test 'food(pelecanus_erythrorhynchos,fish). true': Success
---------------------------------------------------------------
183. Running test 'food(bubulcus_ibis,insects). true'...
  List = [_]
  
  yes
  | ?-
  Test 'food(bubulcus_ibis,insects). true': Success
---------------------------------------------------------------
184. Running test 'food(botaurus_lentiginosus,insects). false'...
  List = []
  
  yes
  | ?-
  Test 'food(botaurus_lentiginosus,insects). false': Success
---------------------------------------------------------------
185. Running test 'food(x,fish). false'...
  List = []
  
  yes
  | ?-
  Test 'food(x,fish). false': Success
---------------------------------------------------------------
186. Running test 'food(egretta_tricolor,X). single'...
  setof(X,food(egretta_tricolor,X),L).
  L = [fish]
  
  yes
  | ?-
  Test 'food(egretta_tricolor,X). single': Success
---------------------------------------------------------------
187. Running test 'food(X,insects). single'...
  setof(X,food(X,insects),L).
  L = [ardeidae,bubulcus,bubulcus_ibis,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,pelecaniformes,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
  
  yes
  | ?-
  Test 'food(X,insects). single': Incorrect output:
          Expected bag of [bubulcus_ibis,eudocimus_albus,nyctanassa_violacea,plegadis_chihi,plegadis_falcinellus], but got [ardeidae,bubulcus,bubulcus_ibis,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,pelecaniformes,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
---------------------------------------------------------------
188. Running test 'food(pelecanus,fish). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'food(pelecanus,fish). genus': Success
---------------------------------------------------------------
189. Running test 'food(pelecaniformes,insects). order'...
  List = [_]
  
  yes
  | ?-
  Test 'food(pelecaniformes,insects). order': Success
---------------------------------------------------------------
190. Running test 'food(pelecaniformes,X). multiple'...
  setof(X,food(pelecaniformes,X),L).
  L = [fish,insects]
  
  yes
  | ?-
  Test 'food(pelecaniformes,X). multiple': Success
---------------------------------------------------------------
191. Running test 'nesting(pelecanus_erythrorhynchos,ground). true'...
  List = [_]
  
  yes
  | ?-
  Test 'nesting(pelecanus_erythrorhynchos,ground). true': Success
---------------------------------------------------------------
192. Running test 'nesting(egretta_tricolor,tree). true'...
  List = [_]
  
  yes
  | ?-
  Test 'nesting(egretta_tricolor,tree). true': Success
---------------------------------------------------------------
193. Running test 'nesting(botaurus_lentiginosus,tree). false'...
  List = []
  
  yes
  | ?-
  Test 'nesting(botaurus_lentiginosus,tree). false': Success
---------------------------------------------------------------
194. Running test 'nesting(x,tree). false'...
  List = []
  
  yes
  | ?-
  Test 'nesting(x,tree). false': Success
---------------------------------------------------------------
195. Running test 'nesting(egretta_tricolor,X). single'...
  setof(X,nesting(egretta_tricolor,X),L).
  L = [tree]
  
  yes
  | ?-
  Test 'nesting(egretta_tricolor,X). single': Success
---------------------------------------------------------------
196. Running test 'nesting(X,ground). multi'...
  setof(X,nesting(X,ground),L).
  L = [ardeidae,botaurus,botaurus_lentiginosus,ixobrychus,ixobrychus_exilis,pelecanidae,pelecaniformes,pelecanus,pelecanus_erythrorhynchos,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
  
  yes
  | ?-
  Test 'nesting(X,ground). multi': Incorrect output:
          Expected bag of [botaurus_lentiginosus,ixobrychus_exilis,pelecanus_erythrorhynchos,plegadis_chihi,plegadis_falcinellus], but got [ardeidae,botaurus,botaurus_lentiginosus,ixobrychus,ixobrychus_exilis,pelecanidae,pelecaniformes,pelecanus,pelecanus_erythrorhynchos,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
---------------------------------------------------------------
197. Running test 'nesting(X,tree). multi'...
  setof(X,nesting(X,tree),L).
  L = [ardea,ardea_alba,ardea_herodias,ardeidae,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis,platalea,platalea_ajaja,threskiornithdae]
  
  yes
  | ?-
  Test 'nesting(X,tree). multi': Incorrect output:
          Expected bag of [ardea_alba,ardea_herodias,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus_albus,nyctanassa_violacea,nycticorax_nycticorax,pelecanus_occidentalis,platalea_ajaja], but got [ardea,ardea_alba,ardea_herodias,ardeidae,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis,platalea,platalea_ajaja,threskiornithdae]
---------------------------------------------------------------
198. Running test 'nesting(pelecanus,ground). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'nesting(pelecanus,ground). genus': Success
---------------------------------------------------------------
199. Running test 'nesting(pelecanus,tree). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'nesting(pelecanus,tree). genus': Success
---------------------------------------------------------------
200. Running test 'nesting(pelecaniformes,tree). order'...
  List = [_]
  
  yes
  | ?-
  Test 'nesting(pelecaniformes,tree). order': Success
---------------------------------------------------------------
201. Running test 'nesting(pelecaniformes,X). multiple'...
  setof(X,nesting(pelecaniformes,X),L).
  L = [ground,tree]
  
  yes
  | ?-
  Test 'nesting(pelecaniformes,X). multiple': Success
---------------------------------------------------------------
202. Running test 'behavior(pelecanus_erythrorhynchos,surfaceDive). true'...
  List = [_]
  
  yes
  | ?-
  Test 'behavior(pelecanus_erythrorhynchos,surfaceDive). true': Success
---------------------------------------------------------------
203. Running test 'behavior(botaurus_lentiginosus,stalking). true'...
  List = [_]
  
  yes
  | ?-
  Test 'behavior(botaurus_lentiginosus,stalking). true': Success
---------------------------------------------------------------
204. Running test 'behavior(botaurus_lentiginosus,aerialDive). false'...
  List = []
  
  yes
  | ?-
  Test 'behavior(botaurus_lentiginosus,aerialDive). false': Success
---------------------------------------------------------------
205. Running test 'behavior(x,stalking). false'...
  List = []
  
  yes
  | ?-
  Test 'behavior(x,stalking). false': Success
---------------------------------------------------------------
206. Running test 'behavior(egretta_tricolor,X). single'...
  setof(X,behavior(egretta_tricolor,X),L).
  L = [stalking]
  
  yes
  | ?-
  Test 'behavior(egretta_tricolor,X). single': Success
---------------------------------------------------------------
207. Running test 'behavior(X,aerialDive). single'...
  setof(X,behavior(X,aerialDive),L).
  L = [pelecaniformes,pelecanus,pelecanus_occidentalis]
  
  yes
  | ?-
  Test 'behavior(X,aerialDive). single': Incorrect output:
          Expected bag of [pelecanus_occidentalis], but got [pelecaniformes,pelecanus,pelecanus_occidentalis]
---------------------------------------------------------------
208. Running test 'behavior(X,stalking). multiple'...
  setof(X,behavior(X,stalking),L).
  L = [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes]
  
  yes
  | ?-
  Test 'behavior(X,stalking). multiple': Incorrect output:
          Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes]
---------------------------------------------------------------
209. Running test 'behavior(pelecanus,aerialDive). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'behavior(pelecanus,aerialDive). genus': Success
---------------------------------------------------------------
210. Running test 'behavior(pelecanus,surfaceDive). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'behavior(pelecanus,surfaceDive). genus': Success
---------------------------------------------------------------
211. Running test 'behavior(pelecaniformes,groundForager). order'...
  List = [_]
  
  yes
  | ?-
  Test 'behavior(pelecaniformes,groundForager). order': Success
---------------------------------------------------------------
212. Running test 'behavior(pelecaniformes,X). multiple'...
  setof(X,behavior(pelecaniformes,X),L).
  L = [aerialDive,groundForager,probing,stalking,surfaceDive]
  
  yes
  | ?-
  Test 'behavior(pelecaniformes,X). multiple': Success
---------------------------------------------------------------
213. Running test 'conservation(pelecanus_erythrorhynchos,lc). true'...
  List = [_]
  
  yes
  | ?-
  Test 'conservation(pelecanus_erythrorhynchos,lc). true': Success
---------------------------------------------------------------
214. Running test 'conservation(egretta_rufescens,nt). true'...
  List = [_]
  
  yes
  | ?-
  Test 'conservation(egretta_rufescens,nt). true': Success
---------------------------------------------------------------
215. Running test 'conservation(botaurus_lentiginosus,nt). false'...
  List = []
  
  yes
  | ?-
  Test 'conservation(botaurus_lentiginosus,nt). false': Success
---------------------------------------------------------------
216. Running test 'conservation(x,lc). false'...
  List = []
  
  yes
  | ?-
  Test 'conservation(x,lc). false': Success
---------------------------------------------------------------
217. Running test 'conservation(egretta_tricolor,X). single'...
  setof(X,conservation(egretta_tricolor,X),L).
  L = [lc]
  
  yes
  | ?-
  Test 'conservation(egretta_tricolor,X). single': Success
---------------------------------------------------------------
218. Running test 'conservation(X,nt). single'...
  setof(X,conservation(X,nt),L).
  L = [ardeidae,egretta,egretta_rufescens,pelecaniformes]
  
  yes
  | ?-
  Test 'conservation(X,nt). single': Incorrect output:
          Expected bag of [egretta_rufescens], but got [ardeidae,egretta,egretta_rufescens,pelecaniformes]
---------------------------------------------------------------
219. Running test 'conservation(X,lc). multiple'...
  setof(X,conservation(X,lc),L).
  L = [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecanus,pelecanus_erythrorhynchos,pelecanus_occidentalis,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
  
  yes
  | ?-
  Test 'conservation(X,lc). multiple': Incorrect output:
          Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_thula,egretta_tricolor,eudocimus_albus,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax,pelecanus_erythrorhynchos,pelecanus_occidentalis,platalea_ajaja,plegadis_chihi,plegadis_falcinellus], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecanus,pelecanus_erythrorhynchos,pelecanus_occidentalis,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
---------------------------------------------------------------
220. Running test 'conservation(egretta,nt). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'conservation(egretta,nt). genus': Success
---------------------------------------------------------------
221. Running test 'conservation(egretta,lc). genus'...
  List = [_]
  
  yes
  | ?-
  Test 'conservation(egretta,lc). genus': Success
---------------------------------------------------------------
222. Running test 'conservation(pelecaniformes,nt). order'...
  List = [_]
  
  yes
  | ?-
  Test 'conservation(pelecaniformes,nt). order': Success
---------------------------------------------------------------
223. Running test 'conservation(pelecaniformes,X). multiple'...
  setof(X,conservation(pelecaniformes,X),L).
  L = [nt]
  
  yes
  | ?-
  Test 'conservation(pelecaniformes,X). multiple': Incorrect output:
          Expected bag of [lc,nt], but got [nt]


CPSC 449 Prolog Assignment: Pelecaniformes version 2 (Prolog testing harness version 7).
========================================================================================
     Test                                                                   Result 
     ------------                                                           ------------
  1. order(pelecaniformes). true                                            Success
  2. order(pelecanidae). false                                              Success
  3. order(X).                                                              Success
  4. family(pelecanidae). true                                              Success
  5. family(ardeidae). true                                                 Success
  6. family(threskiornithdae). true                                         Success
  7. family(pelecaniformes). is an order                                    Success
  8. family(X).                                                             Success
  9. genus(botaurus). true                                                  Success
 10. genus(ardea). true                                                     Success
 11. genus(nycticorax). is both a genus and a species                       Success
 12. genus(erythrorhynchos). is a species                                   Success
 13. genus(X).                                                              Success
 14. species(occidentalis). true                                            Success
 15. species(thula). true                                                   Success
 16. species(nycticorax). is both a genus and a species                     Success
 17. species(plegadis). is a genus                                          Success
 18. species(X).                                                            Success
 19. hasParent(plegadis_falcinellus,plegadis). cspecies/genus               Success
 20. hasParent(falcinellus,plegadis). species/genus                         Success
 21. hasParent(nycticorax,ardeidae). genus/family                           Success
 22. hasParent(threskiornithdae,pelecaniformes). family/order               Success
 23. hasParent(falcinellus,ardeidae). species/family                        Success
 24. hasParent(nycticorax,pelecaniformes). genus/order                      Success
 25. hasParent(X,egretta).                                                  Success
 26. hasParent(egretta,ardeidae). genus/family                              Success
 27. hasParent(caerulea,X).                                                 Success
 28. hasParent(X,Y).                                                        Success
 29. hasParent2(plegadis_falcinellus,plegadis). cspecies/genus              Unimplemented term:
        Expected expression to succeed.
 30. hasParent2(falcinellus,plegadis). species/genus                        Unimplemented term:
        Expected expression to fail.
 31. hasParent2(nycticorax,ardeidae). genus/family                          Unimplemented term:
        Expected expression to succeed.
 32. hasParent2(threskiornithdae,pelecaniformes). family/order              Unimplemented term:
        Expected expression to succeed.
 33. hasParent2(plegadis_falcinellus,ardeidae). cspecies/family             Unimplemented term:
        Expected expression to fail.
 34. hasParent2(nycticorax,pelecaniformes). genus/order                     Unimplemented term:
        Expected expression to fail.
 35. hasParent2(X,egretta).                                                 Unimplemented term:
        Expected starts-with of L = [
 36. hasParent2(egretta,ardeidae). genus/family                             Unimplemented term:
        Expected expression to succeed.
 37. hasParent2(egretta_caerulea,X).                                        Unimplemented term:
        Expected starts-with of L = [
 38. hasParent2(X,Y).                                                       Unimplemented term:
        Expected starts-with of L = [
 39. hasCommonName(pelecanus,pelican). order                                Success
 40. hasCommonName(ardea,heron). genus                                      Success
 41. hasCommonName(nycticorax,nightHeron). genus                            Success
 42. hasCommonName(nyctanassa,nightHeron). genus (also above)               Success
 43. hasCommonName(pelecanus_erythrorhynchos,americanWhitePelican). cspeces Success
 44. hasCommonName(erythrorhynchos,americanWhitePelican). raw speces        Success
 45. hasCommonName(pelecanus_erythrorhynchos,brownPelican). cspeces/wrongName Success
 46. hasCommonName(butorides_virescens,greenHeron). cspecies                Success
 47. hasCommonName(nyctanassa_violacea,X). cspecies/                        Success
 48. hasCommonName(X,roseateSpoonbill). /commonName                         Success
 49. hasCommonName(botaurus,lentiginosus,americanBittern). true             Success
 50. hasCommonName(egretta,rufescens,reddishEgret). true                    Success
 51. hasCommonName(egretta,alba,reddishEgret). genus/species mismatch       Success
 52. hasCommonName(egretta,rufescens,snowyEgret). wrong common name         Success
 53. hasCommonName(nycticorax,nycticorax,blackCrownedNightHeron). true      Success
 54. hasCommonName(botaurus,lentiginosus,X).                                Success
 55. hasCommonName(egretta,rufescens,X).                                    Success
 56. hasCommonName(nycticorax,nycticorax,X).                                Success
 57. hasCommonName(X,Y,americanBittern).                                    Success
 58. hasCommonName(X,Y,reddishEgret).                                       Success
 59. hasCommonName(X,Y,blackCrownedNightHeron).                             Success
 60. hasSciName(greatBlueHeron,ardea_herodias). cspeces                     Success
 61. hasSciName(snowyEgret,egretta_thula). cspeces                          Success
 62. hasSciName(snowyEgret,thula). raw speces                               Success
 63. hasSciName(cattleEgret,bubulcus_ibis). cspeces                         Success
 64. hasSciName(cattleEgret,ibis). raw speces                               Success
 65. hasSciName(ibis,eudocimus). genus                                      Success
 66. hasSciName(ibis,plegadis). genus (same as above)                       Success
 67. hasSciName(greatBlueHeron,X). cspecies/                                Success
 68. hasSciName(snowyEgret,X). cspecies/                                    Success
 69. hasSciName(cattleEgret,X). cspecies/                                   Success
 70. hasSciName(X,ardea_herodias). /cspecies                                Success
 71. hasSciName(X,egretta_thula). /cspecies                                 Success
 72. hasSciName(X,bubulcus_ibis). /cspecies                                 Success
 73. hasCompoundName(pelecanus,occidentalis,pelecanus_occidentalis). true   Success
 74. hasCompoundName(egretta,tricolor,egretta_tricolor). true               Success
 75. hasCompoundName(plegadis,chihi,plegadis_chihi). true                   Success
 76. hasCompoundName(plegadis,chihi,egretta_tricolor). wrong name           Success
 77. hasCompoundName(pelecanus,occidentalis,X).                             Success
 78. hasCompoundName(egretta,tricolor,X).                                   Success
 79. hasCompoundName(plegadis,chihi,X).                                     Success
 80. hasCompoundName(X,Y,pelecanus_occidentalis).                           Incorrect output:
        Expected starts-with of L = [
 81. hasCompoundName(X,Y,egretta_tricolor).                                 Incorrect output:
        Expected starts-with of L = [
 82. hasCompoundName(X,Y,plegadis_chihi).                                   Incorrect output:
        Expected starts-with of L = [
 83. synonym(plegadis,plegadis). equal                                      Success
 84. synonym(glossyIbis,plegadis_falcinellus). common/cspecies              Success
 85. synonym(glossyIbis,alcinellus). common/rawSpecies                      Success
 86. synonym(plegadis_falcinellus,glossyIbis). species/common               Success
 87. synonym(falcinellus,glossyIbis). rawSpecies/common                     Success
 88. synonym(glossyIbis,plegadis_falcinellus). common/compound              Success
 89. synonym(plegadis_falcinellus,glossyIbis). compound/common              Success
 90. synonym(bittern,ixobrychus). common/genus                              Success
 91. synonym(ixobrychus,botaurus). genus/genus with same common name        Success
 92. synonym(bittern,botaurus). common/genus (same as above)                Success
 93. synonym(heron,egret). both are names for egretta                       Success
 94. synonym(greenHeron,X). common/                                         Success
 95. synonym(X,greenHeron). /common                                         Success
 96. synonym(butorides_virescens,X). cspecies/                              Success
 97. synonym(X,butorides_virescens). /cspecies                              Success
 98. synonym(X,heron). /common that maps to 3 genera                        Success
 99. synonym(heron,X). /common that maps to 3 genera                        Success
100. isaStrict(exilis,exilis). equal species                                Incorrect output:
        Expected expression to fail.
101. isaStrict(ardeidae,ardeidae). equal families                           Incorrect output:
        Expected expression to succeed.
102. isaStrict(x,x). equal but unknown                                      Incorrect output:
        Expected expression to fail.
103. isaStrict(ixobrychus_exilis,ixobrychus). cspecies to genus             Incorrect output:
        Expected expression to succeed.
104. isaStrict(ixobrychus_exilis,ardeidae). cspecies to family              Incorrect output:
        Expected expression to succeed.
105. isaStrict(ixobrychus_exilis,pelecaniformes). cspecies to top           Incorrect output:
        Expected expression to succeed.
106. isaStrict(ixobrychus_exilis,botaurus). cspecies to wrong genus         Incorrect output:
        Expected expression to fail.
107. isaStrict(ixobrychus_exilis,pelecanidae). cspecies to wrong family     Incorrect output:
        Expected expression to fail.
108. isaStrict(exilis,ixobrychus). raw species to genus                     Incorrect output:
        Expected expression to fail.
109. isaStrict(ixobrychus_exilis,X).                                        Incorrect output:
        Expected starts-with of L = [
110. isa(exilis,exilis). equal raw species                                  Incorrect output:
        Expected expression to fail.
111. isa(ardeidae,ardeidae). equal families                                 Incorrect output:
        Expected expression to succeed.
112. isa(x,x). equal but unknown name                                       Incorrect output:
        Expected expression to fail.
113. isa(ixobrychus_exilis,ixobrychus). cspecies to genus                   Incorrect output:
        Expected expression to succeed.
114. isa(ixobrychus_exilis,ardeidae). cspecies to family                    Incorrect output:
        Expected expression to succeed.
115. isa(ixobrychus_exilis,pelecaniformes). cspecies to top                 Incorrect output:
        Expected expression to succeed.
116. isa(ixobrychus_exilis,botaurus). cspecies to wrong genus               Incorrect output:
        Expected expression to fail.
117. isa(ixobrychus_exilis,pelecanidae). cspecies to wrong family           Incorrect output:
        Expected expression to fail.
118. isa(exilis,ixobrychus). raw species to genus                           Incorrect output:
        Expected expression to fail.
119. isa(ixobrychus_exilis,X).                                              Incorrect output:
        Expected starts-with of L = [
120. isa(X,pelecanidae).                                                    Incorrect output:
        Expected starts-with of L = [
121. isa(plegadis,ibis). equal genera/common                                Incorrect output:
        Expected expression to succeed.
122. isa(plegadis_chihi,ibis). equal cspecies/common                        Incorrect output:
        Expected expression to succeed.
123. isa(cattleEgret,cattleEgret). equal common/common                      Incorrect output:
        Expected expression to succeed.
124. isa(chihi,ibis). equal rawSpecies/common                               Incorrect output:
        Expected expression to fail.
125. isa(platalea_ajaja,pelecaniformes). bottom to top                      Incorrect output:
        Expected expression to succeed.
126. isa(cattleEgret,bubulcus_ibis). equal commonName to compound species   Incorrect output:
        Expected expression to succeed.
127. isa(whiteIbis,eudocimus). common species name to genus                 Incorrect output:
        Expected expression to succeed.
128. isa(leastBittern,ardeidae). common species name to family              Incorrect output:
        Expected expression to succeed.
129. isa(leastBittern,bittern). common species name to common family        Incorrect output:
        Expected expression to succeed.
130. isa(whiteFacedIbis,chihi). common species name to species alone        Incorrect output:
        Expected expression to fail.
131. isa(plegadis_falcinellus,threskiornithdae). compound species name to family Incorrect output:
        Expected expression to succeed.
132. isa(nyctanassa,nightHeron). genus to genus common name                 Incorrect output:
        Expected expression to succeed.
133. isa(nyctanassa,egret). genus to wrong genus common name                Incorrect output:
        Expected expression to fail.
134. isa(nyctanassa_violacea,nightHeron). cspecies to genus common name     Incorrect output:
        Expected expression to succeed.
135. isa(nyctanassa_violacea,egret). cspecies to wrong genus common name    Incorrect output:
        Expected expression to fail.
136. isa(x,X). unknown/                                                     Incorrect output:
        Expected list starting with 'L = [' and ending with ']', but got 'uncaught exception: error(instantiation_error,atom_concat/3)
| ?-'.
137. isa(ardea_herodias,X). species                                         Incorrect output:
        Expected starts-with of L = [
138. isa(greatBlueHeron,X). common species                                  Incorrect output:
        Expected starts-with of L = [
139. isa(ixobrychus_exilis,X). compound species                             Incorrect output:
        Expected starts-with of L = [
140. isa(butorides,X). genus                                                Incorrect output:
        Expected starts-with of L = [
141. isa(X,ardeidae). family                                                Incorrect output:
        Expected starts-with of L = [
142. isa(X,eudocimus_albus). compound species                               Incorrect output:
        Expected starts-with of L = [
143. isa(X,bittern). common species (multi)                                 Incorrect output:
        Expected starts-with of L = [
144. countSpecies(botaurus_lentiginosus,1). species                         Unimplemented term:
        Expected expression to succeed.
145. countSpecies(botaurus,1). single-species genus                         Unimplemented term:
        Expected expression to succeed.
146. countSpecies(egretta,4). 4-species genus                               Unimplemented term:
        Expected expression to succeed.
147. countSpecies(ardeidae,12). 12-species family                           Unimplemented term:
        Expected expression to succeed.
148. countSpecies(pelecaniformes,18). 18-species order                      Unimplemented term:
        Expected expression to succeed.
149. countSpecies(x,0). 0-species unknown name                              Unimplemented term:
        Expected expression to succeed.
150. countSpecies(botaurus_lentiginosus,X). species                         Unimplemented term:
        Expected starts-with of L = [
151. countSpecies(botaurus,X). single-species genus                         Unimplemented term:
        Expected starts-with of L = [
152. countSpecies(egretta,X). 4-species genus                               Unimplemented term:
        Expected starts-with of L = [
153. countSpecies(ardeidae,X). 12-species family                            Unimplemented term:
        Expected starts-with of L = [
154. countSpecies(pelecaniformes,X). 18-species order                       Unimplemented term:
        Expected starts-with of L = [
155. countSpecies(x,X). 0-species unknown name                              Unimplemented term:
        Expected starts-with of L = [
156. rangesTo(botaurus_lentiginosus,alberta). simple species                Success
157. rangesTo(botaurus_lentiginosus,canada). species, inferred location     Success
158. rangesTo(pelecanus,alberta). simple genus                              Success
159. rangesTo(pelecanus,canada). genus, inferred location                   Success
160. rangesTo(pelecanidae,canada). order, inferred location                 Success
161. rangesTo(ardea_alba,alberta). speces, wrong location                   Success
162. rangesTo(platalea_ajaja,canada). speces, wrong location                Success
163. rangesTo(botaurus_lentiginosus,X). species, inferred location          Success
164. rangesTo(pelecanus,X). simple genus                                    Success
165. rangesTo(pelecanus,X). genus, inferred location                        Success
166. rangesTo(pelecanidae,X). order, inferred location                      Success
167. rangesTo(ardea_alba,alberta). speces, wrong location                   Success
168. rangesTo(platalea_ajaja,canada). speces, wrong location                Success
169. rangesTo(X,alberta). /alberta                                          Incorrect output:
        Expected starts-with of L = [
170. rangesTo(X,canada). /canada                                            Incorrect output:
        Expected starts-with of L = [
171. rangesTo(X,Y). * / *                                                   Incorrect output:
        Expected starts-with of L = [
172. habitat(pelecanus_erythrorhynchos,lakePond). true                      Success
173. habitat(botaurus_lentiginosus,marsh). true                             Success
174. habitat(botaurus_lentiginosus,ocean). false                            Success
175. habitat(x,ocean). false                                                Success
176. habitat(egretta_tricolor,X). single                                    Success
177. habitat(X,ocean). single                                               Incorrect output:
        Expected bag of [pelecanus_occidentalis], but got [pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis]
178. habitat(X,marsh). multiple                                             Incorrect output:
        Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus_albus,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax,platalea_ajaja,plegadis_chihi,plegadis_falcinellus], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
179. habitat(pelecanus,ocean). genus                                        Success
180. habitat(pelecaniformes,ocean). order                                   Success
181. habitat(pelecaniformes,X). multiple                                    Success
182. food(pelecanus_erythrorhynchos,fish). true                             Success
183. food(bubulcus_ibis,insects). true                                      Success
184. food(botaurus_lentiginosus,insects). false                             Success
185. food(x,fish). false                                                    Success
186. food(egretta_tricolor,X). single                                       Success
187. food(X,insects). single                                                Incorrect output:
        Expected bag of [bubulcus_ibis,eudocimus_albus,nyctanassa_violacea,plegadis_chihi,plegadis_falcinellus], but got [ardeidae,bubulcus,bubulcus_ibis,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,pelecaniformes,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
188. food(pelecanus,fish). genus                                            Success
189. food(pelecaniformes,insects). order                                    Success
190. food(pelecaniformes,X). multiple                                       Success
191. nesting(pelecanus_erythrorhynchos,ground). true                        Success
192. nesting(egretta_tricolor,tree). true                                   Success
193. nesting(botaurus_lentiginosus,tree). false                             Success
194. nesting(x,tree). false                                                 Success
195. nesting(egretta_tricolor,X). single                                    Success
196. nesting(X,ground). multi                                               Incorrect output:
        Expected bag of [botaurus_lentiginosus,ixobrychus_exilis,pelecanus_erythrorhynchos,plegadis_chihi,plegadis_falcinellus], but got [ardeidae,botaurus,botaurus_lentiginosus,ixobrychus,ixobrychus_exilis,pelecanidae,pelecaniformes,pelecanus,pelecanus_erythrorhynchos,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
197. nesting(X,tree). multi                                                 Incorrect output:
        Expected bag of [ardea_alba,ardea_herodias,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus_albus,nyctanassa_violacea,nycticorax_nycticorax,pelecanus_occidentalis,platalea_ajaja], but got [ardea,ardea_alba,ardea_herodias,ardeidae,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecaniformes,pelecanus,pelecanus_occidentalis,platalea,platalea_ajaja,threskiornithdae]
198. nesting(pelecanus,ground). genus                                       Success
199. nesting(pelecanus,tree). genus                                         Success
200. nesting(pelecaniformes,tree). order                                    Success
201. nesting(pelecaniformes,X). multiple                                    Success
202. behavior(pelecanus_erythrorhynchos,surfaceDive). true                  Success
203. behavior(botaurus_lentiginosus,stalking). true                         Success
204. behavior(botaurus_lentiginosus,aerialDive). false                      Success
205. behavior(x,stalking). false                                            Success
206. behavior(egretta_tricolor,X). single                                   Success
207. behavior(X,aerialDive). single                                         Incorrect output:
        Expected bag of [pelecanus_occidentalis], but got [pelecaniformes,pelecanus,pelecanus_occidentalis]
208. behavior(X,stalking). multiple                                         Incorrect output:
        Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,butorides_virescens,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_rufescens,egretta_thula,egretta_tricolor,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecaniformes]
209. behavior(pelecanus,aerialDive). genus                                  Success
210. behavior(pelecanus,surfaceDive). genus                                 Success
211. behavior(pelecaniformes,groundForager). order                          Success
212. behavior(pelecaniformes,X). multiple                                   Success
213. conservation(pelecanus_erythrorhynchos,lc). true                       Success
214. conservation(egretta_rufescens,nt). true                               Success
215. conservation(botaurus_lentiginosus,nt). false                          Success
216. conservation(x,lc). false                                              Success
217. conservation(egretta_tricolor,X). single                               Success
218. conservation(X,nt). single                                             Incorrect output:
        Expected bag of [egretta_rufescens], but got [ardeidae,egretta,egretta_rufescens,pelecaniformes]
219. conservation(X,lc). multiple                                           Incorrect output:
        Expected bag of [ardea_alba,ardea_herodias,botaurus_lentiginosus,bubulcus_ibis,butorides_virescens,egretta_caerulea,egretta_thula,egretta_tricolor,eudocimus_albus,ixobrychus_exilis,nyctanassa_violacea,nycticorax_nycticorax,pelecanus_erythrorhynchos,pelecanus_occidentalis,platalea_ajaja,plegadis_chihi,plegadis_falcinellus], but got [ardea,ardea_alba,ardea_herodias,ardeidae,botaurus,botaurus_lentiginosus,bubulcus,bubulcus_ibis,butorides,butorides_virescens,egretta,egretta_caerulea,egretta_thula,egretta_tricolor,eudocimus,eudocimus_albus,ixobrychus,ixobrychus_exilis,nyctanassa,nyctanassa_violacea,nycticorax,nycticorax_nycticorax,pelecanidae,pelecanus,pelecanus_erythrorhynchos,pelecanus_occidentalis,platalea,platalea_ajaja,plegadis,plegadis_chihi,plegadis_falcinellus,threskiornithdae]
220. conservation(egretta,nt). genus                                        Success
221. conservation(egretta,lc). genus                                        Success
222. conservation(pelecaniformes,nt). order                                 Success
223. conservation(pelecaniformes,X). multiple                               Incorrect output:
        Expected bag of [lc,nt], but got [nt]

Summary:
141 Success                                 
 60 Incorrect output                        
 22 Unimplemented term                      
---
223     Total Tests (version 2)
  0/0   Strict Tests Passed
141/223 Non-Strict Tests Passed
